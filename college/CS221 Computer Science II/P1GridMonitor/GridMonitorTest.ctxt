#BlueJ class context
comment0.target=GridMonitorTest
comment0.text=\r\n\ Console\ app\ to\ test\ GridMonitor\ class\r\n\ @author\ mvail\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=@param\ args\ not\ used
comment10.params=
comment10.target=boolean\ lameToStringTest()
comment10.text=\ Exercise\ toString()\ after\ loading\ "sample.txt"\ \r\n\ \ \ \ testing\ toString()\ is\ a\ little\ challenging\ because\ unit\ tests\ should\r\n\ \ \ \ be\ automated\ such\ that\ no\ user\ evaluation\ is\ necessary\ to\ determine\r\n\ \ \ \ if\ a\ test\ has\ succeeded\ or\ failed\ -\ need\ to\ compare\ toString()\ output\r\nto\ expected\ output
comment11.params=
comment11.target=boolean\ getBaseGridEncapsulationTest()
comment11.text=check\ that\ a\ copy\ of\ base\ grid\ is\ being\ returned\ by\ getBaseGrid()
comment12.params=
comment12.target=boolean\ getSurroundingSumGridEncapsulationTest()
comment12.text=get\ sum\ grid,\ make\ a\ change\ via\ returned\ reference,\ confirm\ original\ is\ unchanged
comment13.params=
comment13.target=boolean\ getSurroundingAvgGridEncapsulationTest()
comment13.text=get\ avg\ grid,\ make\ a\ change\ via\ returned\ reference,\ confirm\ original\ is\ unchanged
comment14.params=
comment14.target=boolean\ getDangerGridEncapsulationTest()
comment14.text=get\ danger\ grid,\ make\ a\ change\ via\ returned\ reference,\ confirm\ original\ is\ unchanged
comment15.params=
comment15.target=boolean\ load4x5Test()
comment15.text=Call\ GridMonitor\ constructor\ with\ "sample4x5.txt"
comment16.params=
comment16.target=boolean\ getBaseGrid4x5Test()
comment16.text=Compare\ grid\ from\ getBaseGrid()\ to\ expected\ grid\ from\ "sample4x5.txt"
comment17.params=
comment17.target=boolean\ getSurroundingSumGrid4x5Test()
comment17.text=Compare\ result\ from\ getSurroundingSumGrid()\ to\ expected\ grid\ for\ "sample4x5.txt"
comment18.params=
comment18.target=boolean\ getSurroundingAvgGrid4x5Test()
comment18.text=Compare\ result\ from\ getSurroundingAvgGrid()\ to\ expected\ grid\ for\ "sample4x5.txt"
comment19.params=
comment19.target=boolean\ getDeltaGrid4x5Test()
comment19.text=Compare\ result\ from\ getDeltaGrid()\ to\ expected\ grid\ for\ "sample4x5.txt"
comment2.params=
comment2.target=void\ runTests()
comment2.text=Run\ tests\ on\ GridMonitor\ constructor\ and\ expected\ methods
comment20.params=
comment20.target=boolean\ getDangerGrid4x5Test()
comment20.text=Compare\ result\ from\ getDangerGrid()\ to\ expected\ grid\ for\ "sample4x5.txt"
comment21.params=
comment21.target=boolean\ lameToString4x5Test()
comment21.text=Exercise\ toString()\ after\ loading\ "sample4x5.txt"
comment22.params=
comment22.target=boolean\ loadDoublesTest()
comment22.text=Call\ GridMonitor\ constructor\ with\ "sampleDoubles.txt"
comment23.params=
comment23.target=boolean\ getBaseGridDoublesTest()
comment23.text=Compare\ grid\ from\ getBaseGrid()\ to\ expected\ grid\ from\ "sampleDoubles.txt"
comment24.params=
comment24.target=boolean\ getSurroundingSumGridDoublesTest()
comment24.text=Compare\ result\ from\ getSurroundingSumGrid()\ to\ expected\ grid\ for\ "sampleDoubles.txt"
comment25.params=
comment25.target=boolean\ loadNegativesTest()
comment25.text=Call\ GridMonitor\ constructor\ with\ "negatives.txt"
comment26.params=
comment26.target=boolean\ getBaseGridNegativesTest()
comment26.text=Compare\ grid\ from\ getBaseGrid()\ to\ expected\ grid\ from\ "sampleNegatives.txt"
comment27.params=
comment27.target=boolean\ getSurroundingSumGridNegativesTest()
comment27.text=Compare\ result\ from\ getSurroundingSumGrid()\ to\ expected\ grid\ for\ "negatives.txt"
comment28.params=
comment28.target=boolean\ getSurroundingAvgGridNegativesTest()
comment28.text=Compare\ result\ from\ getSurroundingAvgGrid()\ to\ expected\ grid\ for\ "negatives.txt"
comment29.params=
comment29.target=boolean\ getDeltaGridNegativesTest()
comment29.text=Compare\ result\ from\ getDeltaGrid()\ to\ expected\ grid\ for\ "negatives.txt"
comment3.params=
comment3.target=boolean\ gridMonitorInterfaceTest()
comment3.text=Confirm\ that\ GridMonitor\ implements\ GridMonitorInterface
comment30.params=
comment30.target=boolean\ getDangerGridNegativesTest()
comment30.text=Compare\ result\ from\ getDangerGrid()\ to\ expected\ grid\ for\ "negatives.txt"
comment31.params=
comment31.target=boolean\ load1x1Test()
comment31.text=Call\ GridMonitor\ constructor\ with\ "oneByOne.txt"
comment32.params=
comment32.target=boolean\ getSurroundingSumGrid1x1Test()
comment32.text=Compare\ result\ from\ getSurroundingMaxGrid()\ to\ expected\ grid\ for\ "oneByOne.txt"
comment33.params=
comment33.target=boolean\ loadWideRangeTest()
comment33.text=Call\ GridMonitor\ constructor\ with\ "wideRange.txt"
comment34.params=
comment34.target=boolean\ getBaseGridWideRangeTest()
comment34.text=Compare\ grid\ from\ getBaseGrid()\ to\ expected\ grid\ from\ "wideRange.txt"
comment35.params=
comment35.target=boolean\ noSuchFileTest()
comment35.text=Confirm\ that\ FileNotFoundException\ is\ thrown\ when\ GridMonitor\ constructor\ is\ called\ with\ "noSuch.txt"
comment36.params=testDesc\ result
comment36.target=void\ printTest(java.lang.String,\ boolean)
comment36.text=\ Print\ test\ results\ in\ a\ consistent\ format\r\n\ @param\ testDesc\ description\ of\ the\ test\r\n\ @param\ result\ indicates\ if\ the\ test\ passed\ or\ failed\r\n
comment37.params=
comment37.target=void\ printFinalSummary()
comment37.text=Print\ a\ final\ summary
comment38.params=v1\ v2
comment38.target=boolean\ isClose(double,\ double)
comment38.text=\ Compare\ two\ doubles\ and\ return\ true\ if\ they\ are\ within\ TOLERANCE,\ else\ false\r\n\ @param\ v1\ first\ value\ to\ compare\r\n\ @param\ v2\ second\ value\ to\ compare\r\n\ @return\ true\ if\ v1\ and\ v2\ are\ within\ TOLERANCE,\ else\ false\r\n
comment39.params=a1\ a2
comment39.target=boolean\ equivalent2DArrays(double[][],\ double[][])
comment39.text=\ Compare\ two\ two-dimensional\ double\ arrays\ for\ equivalence.\r\n\ @param\ a1\ first\ double[][]\r\n\ @param\ a2\ second\ double[][]\r\n\ @return\ true\ if\ all\ values\ in\ a1\ and\ a2\ are\ within\ the\ given\ tolerance,\ else\ false\r\n
comment4.params=
comment4.target=boolean\ loadSampleTest()
comment4.text=Call\ GridMonitor\ constructor\ with\ "sample.txt"
comment40.params=a1\ a2
comment40.target=boolean\ equivalent2DArrays(boolean[][],\ boolean[][])
comment40.text=\ Compare\ two\ two-dimensional\ boolean\ arrays\ for\ equivalence.\r\n\ @param\ a1\ first\ boolean[][]\r\n\ @param\ a2\ second\ boolean[][]\r\n\ @return\ true\ if\ all\ values\ in\ a1\ and\ a2\ are\ identical,\ else\ false\r\n
comment41.params=array
comment41.target=void\ print2DArray(double[][])
comment41.text=\ Output\ a\ 2D\ double\ array\ in\ tabular\ format\r\n@param\ array\ 2D\ double\ array\ to\ print
comment42.params=array
comment42.target=void\ print2DArray(boolean[][])
comment42.text=\ Output\ a\ 2D\ boolean\ array\ in\ tabular\ format\r\n@param\ array\ 2D\ boolean\ array\ to\ print
comment5.params=
comment5.target=boolean\ getBaseGridSampleTest()
comment5.text=Compare\ grid\ from\ getBaseGrid()\ to\ expected\ grid\ from\ "sample.txt"
comment6.params=
comment6.target=boolean\ getSurroundingSumGridSampleTest()
comment6.text=Compare\ result\ from\ getSurroundingSumGrid()\ to\ expected\ grid\ for\ "sample.txt"
comment7.params=
comment7.target=boolean\ getSurroundingAvgGridSampleTest()
comment7.text=Compare\ result\ from\ getSurroundingAvgGrid()\ to\ expected\ grid\ for\ "sample.txt"
comment8.params=
comment8.target=boolean\ getDeltaGridSampleTest()
comment8.text=Compare\ result\ from\ getDeltaGrid()\ to\ expected\ grid\ for\ "sample.txt"
comment9.params=
comment9.target=boolean\ getDangerGridSampleTest()
comment9.text=Compare\ result\ from\ getDangerGrid()\ to\ expected\ grid\ for\ "sample.txt"
numComments=43
