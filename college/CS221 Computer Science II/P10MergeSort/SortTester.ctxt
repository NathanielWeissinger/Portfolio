#BlueJ class context
comment0.target=SortTester
comment0.text=\r\n\ Test\ Sort\ class\ using\ WrappedDLL\ class.\r\n\ @author\ CS221\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=@param\ args\ optional\ parameters\ <-a|-f>\ <-s>
comment10.params=
comment10.target=IndexedUnsortedList\ listBAC()
comment10.text=@return\ [B,A,C]
comment11.params=
comment11.target=IndexedUnsortedList\ listBCA()
comment11.text=@return\ [B,C,A]
comment12.params=
comment12.target=IndexedUnsortedList\ listCAB()
comment12.text=@return\ [C,A,B]
comment13.params=
comment13.target=IndexedUnsortedList\ listCBA()
comment13.text=@return\ [C,B,A]
comment14.params=
comment14.target=IndexedUnsortedList\ listAAB()
comment14.text=@return\ [A,A,B]
comment15.params=
comment15.target=IndexedUnsortedList\ listABA()
comment15.text=@return\ [A,B,A]
comment16.params=
comment16.target=IndexedUnsortedList\ listBAA()
comment16.text=@return\ [B,A,A]
comment17.params=
comment17.target=IndexedUnsortedList\ listABB()
comment17.text=@return\ [A,B,B]
comment18.params=
comment18.target=IndexedUnsortedList\ listBAB()
comment18.text=@return\ [B,A,B]
comment19.params=
comment19.target=IndexedUnsortedList\ listBBA()
comment19.text=@return\ [B,B,A]
comment2.params=args
comment2.target=SortTester(java.lang.String[])
comment2.text=\ configure\ output\ based\ on\ command\ line\ args\ \r\n\ \tprint\ all\ tests\:\ -a\r\n\ \ print\ failed\ tests\ only\:\ -f\ (-f\ overrules\ -a\ and\ filters\ all\ passed\ tests)\r\n\ \ print\ section\ summaries\:\ -s\ (can\ be\ combined\ with\ -a\ or\ -f)\r\n\ \ print\ only\ final\ summary\:\ no\ args\r\n
comment20.params=
comment20.target=IndexedUnsortedList\ listABCD()
comment20.text=@return\ [A,B,C,D]
comment21.params=
comment21.target=IndexedUnsortedList\ listBDAC()
comment21.text=@return\ [B,D,A,C]
comment22.params=
comment22.target=IndexedUnsortedList\ listCADB()
comment22.text=@return\ [C,A,D,B]
comment23.params=
comment23.target=IndexedUnsortedList\ listDCBA()
comment23.text=@return\ [D,C,B,A]
comment24.params=
comment24.target=IndexedUnsortedList\ listABCC()
comment24.text=@return\ [A,B,C,C]
comment25.params=
comment25.target=IndexedUnsortedList\ listCACB()
comment25.text=@return\ [C,A,C,B]
comment26.params=
comment26.target=IndexedUnsortedList\ listCCBA()
comment26.text=@return\ [C,C,B,A]
comment27.params=
comment27.target=IndexedUnsortedList\ listABCDE()
comment27.text=@return\ [A,B,C,D,E]
comment28.params=
comment28.target=IndexedUnsortedList\ listADBEC()
comment28.text=@return\ [A,D,B,E,C]
comment29.params=
comment29.target=IndexedUnsortedList\ listEDCBA()
comment29.text=@return\ [E,D,C,B,A]
comment3.params=
comment3.target=IndexedUnsortedList\ newList()
comment3.text=\r\n\ Returns\ chosen\ List\ so\ the\ implementation\ can\ be\ changed\r\n\ in\ this\ one\ location\ rather\ than\ in\ every\ test.\r\n\ @return\ [\ ]\r\n
comment30.params=
comment30.target=void\ runTests()
comment30.text=\r\n\ Run\ tests\ to\ confirm\ required\ functionality\ from\ list\ constructors\ and\ methods\r\n
comment31.params=
comment31.target=boolean\ testTimeToSortBigList()
comment31.text=@return\ true\ if\ test\ passes,\ else\ false
comment32.params=
comment32.target=boolean\ testTimeToSortComparatorBigList()
comment32.text=@return\ true\ if\ test\ passes,\ else\ false
comment33.params=listToSort\ sortedList
comment33.target=boolean\ testSort(IndexedUnsortedList,\ IndexedUnsortedList)
comment33.text=\r\n\ Sorts\ listToSort\ and\ compares\ the\ result\ to\ sortedList.\r\n\ @param\ listToSort\r\n\ @param\ sortedList\r\n\ @return\ true\ if\ listToSort\ and\ sortedList\ are\ the\ same\ after\ sorting\ listToSort\r\n
comment34.params=listToSort\ sortedList\ c
comment34.target=boolean\ testSort(IndexedUnsortedList,\ IndexedUnsortedList,\ java.util.Comparator)
comment34.text=\r\n\ Sorts\ listToSort\ and\ compares\ the\ result\ to\ sortedList.\r\n\ @param\ listToSort\r\n\ @param\ sortedList\r\n\ @param\ c\ a\ Comparator\ to\ use\ in\ sorting\r\n\ @return\ true\ if\ listToSort\ and\ sortedList\ are\ the\ same\ after\ sorting\ listToSort\r\n
comment35.params=elements
comment35.target=IndexedUnsortedList\ newListWithElements(java.lang.Integer[])
comment35.text=\r\n\ @param\ elements\ array\ containing\ elements\ that\ should\ be\ in\ the\ list\r\n\ @return\ the\ list\r\n
comment36.params=list1\ list2
comment36.target=boolean\ equivalentLists(IndexedUnsortedList,\ IndexedUnsortedList)
comment36.text=\r\n\ @param\ list1\ first\ list\r\n\ @param\ list2\ second\ list\r\n\ @return\ true\ if\ they\ are\ the\ same\ size\ and\ contain\ all\ of\ the\ same\ elements\ in\ the\ same\ order,\ else\ false\r\n
comment37.params=list1\ list2
comment37.target=void\ printLists(IndexedUnsortedList,\ IndexedUnsortedList)
comment37.text=\r\n\ Prints\ out\ contents\ of\ two\ lists,\ labels\ list1\ "current\ list"\ \ and\ list2\ "expected\ list"\ \r\n\ @param\ list1\ -\ first\ list\ printed\r\n\ @param\ list2\ -\ second\ list\ printed\ \r\n
comment38.params=testDesc\ result
comment38.target=void\ printTest(java.lang.String,\ boolean)
comment38.text=\ Print\ test\ results\ in\ a\ consistent\ format\r\n\ @param\ testDesc\ description\ of\ the\ test\r\n\ @param\ result\ indicates\ if\ the\ test\ passed\ or\ failed\r\n
comment39.params=
comment39.target=void\ printFinalSummary()
comment39.text=Print\ a\ final\ summary
comment4.params=
comment4.target=IndexedUnsortedList\ listA()
comment4.text=@return\ [A]
comment40.params=secLabel
comment40.target=void\ printSectionSummary(java.lang.String)
comment40.text=Print\ a\ section\ summary
comment5.params=
comment5.target=IndexedUnsortedList\ listAB()
comment5.text=@return\ [A,B]
comment6.params=
comment6.target=IndexedUnsortedList\ listBA()
comment6.text=@return\ [B,A]
comment7.params=
comment7.target=IndexedUnsortedList\ listAA()
comment7.text=@return\ [A,A]
comment8.params=
comment8.target=IndexedUnsortedList\ listABC()
comment8.text=@return\ [A,B,C]
comment9.params=
comment9.target=IndexedUnsortedList\ listACB()
comment9.text=@return\ [A,C,B]
numComments=41
