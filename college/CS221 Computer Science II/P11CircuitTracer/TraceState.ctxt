#BlueJ class context
comment0.target=TraceState
comment0.text=\r\n\ Represents\ a\ search\ state\ including\ a\ potential\ path\ through\ a\ CircuitBoard\r\n\ \r\n\ @author\ mvail\r\n
comment1.params=startingBoard\ row\ col
comment1.target=TraceState(CircuitBoard,\ int,\ int)
comment1.text=\ Initial\ state\ with\ the\ trace\ path\ beginning\ at\ given\ row\ and\ column\r\n\ @param\ startingBoard\ \r\n\ @param\ row\ initial\ path\ row\r\n\ @param\ col\ initial\ path\ column\r\n
comment10.params=p1\ p2
comment10.target=boolean\ adjacent(java.awt.Point,\ java.awt.Point)
comment10.text=\r\n\ @param\ p1\ first\ Point\r\n\ @param\ p2\ second\ Point\r\n\ @return\ true\ if\ p1\ and\ p2\ are\ adjacent,\ else\ false\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ (non-Javadoc)\r\n\ @see\ java.lang.Object\#toString()\r\n
comment2.params=previousState\ row\ col
comment2.target=TraceState(TraceState,\ int,\ int)
comment2.text=\ New\ state\ adding\ given\ row\ and\ column\ position\ to\ the\ path\ from\ previous\ state\r\n\ @param\ previousState\r\n\ @param\ row\ row\ of\ next\ point\ to\ add\ to\ the\ path\r\n\ @param\ col\ column\ of\ next\ point\ to\ add\ to\ the\ path\r\n
comment3.params=row\ col
comment3.target=boolean\ isOpen(int,\ int)
comment3.text=\ Indicates\ if\ a\ position\ is\ open\ in\ this\ state's\ board\r\n\ @param\ row\ row\ of\ position\ to\ check\r\n\ @param\ col\ column\ of\ position\ to\ check\r\n\ @return\ true\ if\ given\ row\ and\ column\ position\ is\ open\r\n
comment4.params=
comment4.target=int\ pathLength()
comment4.text=@return\ path\ length
comment5.params=
comment5.target=int\ getRow()
comment5.text=@return\ row\ of\ the\ last\ point\ in\ the\ path
comment6.params=
comment6.target=int\ getCol()
comment6.text=@return\ column\ of\ the\ last\ point\ in\ the\ path
comment7.params=
comment7.target=CircuitBoard\ getBoard()
comment7.text=@return\ the\ current\ CircuitBoard\ from\ this\ state\ with\ the\ path\ filled\ in\ with\ 'T's
comment8.params=
comment8.target=java.util.ArrayList\ getPath()
comment8.text=@return\ list\ of\ row,\ column\ points\ that\ make\ up\ the\ path
comment9.params=
comment9.target=boolean\ isComplete()
comment9.text=@return\ true\ if\ path\ ends\ adjacent\ to\ ending\ component
numComments=12
