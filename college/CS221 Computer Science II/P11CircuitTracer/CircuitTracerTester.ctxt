#BlueJ class context
comment0.target=CircuitTracerTester
comment0.text=\r\n\ A\ unit\ test\ class\ for\ CircuitTracer\ (and\ CircuitBoard)\r\n\ \r\n\ @author\ mvail\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Initialize\ and\ run\ tests\r\n\ @param\ args\ not\ used\r\n\ @throws\ FileNotFoundException\ \r\n
comment10.params=solution\ reportedSolutions
comment10.target=boolean\ findSolution(char[][],\ char[][][])
comment10.text=\ Search\ for\ given\ solution\ in\ reportedSolutions\r\n\ @param\ solution\r\n\ @param\ reportedSolutions\r\n\ @return\ true\ if\ solution\ is\ found\ in\ reportedSolutions\r\n
comment11.params=args
comment11.target=boolean\ testCircuitTracerArgs(java.lang.String[])
comment11.text=\ Run\ invalid\ set\ of\ command\ line\ arguments\ with\ CircuitTracer\ and\ confirm\ program\ exits\ cleanly.\r\n\ @param\ args\ command\ line\ args\ to\ use\ with\ CircuitTracer\r\n\ @return\ true\ if\ program\ exits\ cleanly\r\n
comment12.params=storage\ fileName
comment12.target=boolean\ testCircuitTracerGui(java.lang.String,\ java.lang.String)
comment12.text=\ Run\ CircuitTracer\ with\ GUI\ output\ specified.\ Program\ should\ open\ GUI\ or\ exit\ cleanly\ with\ unsupported\ option\ message.\r\n\ @param\ storage\r\n\ @param\ fileName\r\n\ @return\ true\ if\ program\ exits\ cleanly\r\n
comment13.params=
comment13.target=void\ makeFiles()
comment13.text=\ Generate\ all\ valid\ and\ invalid\ input\ files\ for\ testing\ \r\n@throws\ FileNotFoundException
comment14.params=contents\ fileName
comment14.target=void\ makeFile(char[][],\ java.lang.String)
comment14.text=\ Generate\ an\ input\ file\ where\ row/col\ line\ matches\ contents\ \r\n@throws\ FileNotFoundException
comment15.params=contents\ fileName\ rowCol
comment15.target=void\ makeFile(char[][],\ java.lang.String,\ java.lang.String)
comment15.text=\ Generate\ an\ input\ file\ where\ row/col\ line\ matches\ given\ rowCol\ String\ \r\n@throws\ FileNotFoundException
comment2.params=args
comment2.target=CircuitTracerTester(java.lang.String[])
comment2.text=\ tester\ constructor\r\n\ @param\ args\ command\ line\ args\r\n\ @throws\ FileNotFoundException\ \r\n
comment3.params=testDesc\ result
comment3.target=void\ printTest(java.lang.String,\ boolean)
comment3.text=\ Print\ test\ results\ in\ a\ consistent\ format\r\n\ @param\ testDesc\ description\ of\ the\ test\r\n\ @param\ result\ indicates\ if\ the\ test\ passed\ or\ failed\r\n
comment4.params=
comment4.target=void\ printFinalSummary()
comment4.text=Print\ a\ final\ summary
comment5.params=
comment5.target=void\ runTests()
comment5.text=Run\ tests\ to\ confirm\ required\ functionality\ from\ list\ constructors\ and\ methods
comment6.params=fileName\ contents\ expectedResult
comment6.target=boolean\ testCircuitBoard(java.lang.String,\ char[][],\ CircuitTracerTester.Result)
comment6.text=\ Confirm\ expected\ result\ of\ constructing\ new\ CircuitBoard\ from\ input\ file\r\n\ @param\ fileName\ input\ file\r\n\ @param\ contents\ expected\ board\ contents\ for\ valid\ files\r\n\ @param\ expectedResult\ expected\ test\ result\r\n\ @return\ true\ if\ result\ matches\ expectedResult\r\n
comment7.params=storage\ outputTarget\ fileName
comment7.target=boolean\ testCircuitTracerInvalid(java.lang.String,\ java.lang.String,\ java.lang.String)
comment7.text=\ Confirm\ CircuitTracer\ reports\ messages\ and\ exits\ cleanly\ when\ given\ an\ invalid\ input\ file.\r\n\ @param\ storage\r\n\ @param\ outputTarget\r\n\ @param\ fileName\r\n\ @param\ expectedResult\r\n\ @return\r\n
comment8.params=storage\ outputTarget\ fileName\ solutions
comment8.target=boolean\ testCircuitTracerValid(java.lang.String,\ java.lang.String,\ java.lang.String,\ char[][][])
comment8.text=\ Confirm\ CircuitTracer\ produces\ correct\ results\ in\ the\ expected\ output\ format\ when\ given\ a\ valid\ input\ file.\r\n\ @param\ storage\ stack\ or\ queue\r\n\ @param\ outputTarget\ console\ or\ gui\r\n\ @param\ fileName\ input\ file\r\n\ @param\ solutions\ expected\ solutions\r\n\ @param\ expectedResult\ ValidOutput\r\n\ @return\ true\ if\ test\ passes,\ else\ false\r\n
comment9.params=file\ expectedSolutions\ expectedRows\ expectedCols
comment9.target=char[][][]\ readOutFile(java.io.File,\ int,\ int,\ int)
comment9.text=\ Read\ output\ into\ char\ arrays\ for\ comparison\ with\ known\ solutions\r\n\ @param\ file\r\n\ @return\ solutions\ array\r\n\ @throws\ FileNotFoundException\r\n\ @throws\ InvalidOutputException\r\n
numComments=16
