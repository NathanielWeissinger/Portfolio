#BlueJ class context
comment0.target=ListTester
comment0.text=\r\n\ A\ unit\ test\ class\ for\ lists\ that\ implement\ IndexedUnsortedList.\ \r\n\ This\ is\ a\ set\ of\ black\ box\ tests\ that\ should\ work\ for\ any\ implementation\r\n\ of\ this\ interface.\r\n\ \r\n\ NOTE\:\ One\ example\ test\ is\ given\ for\ each\ interface\ method\ using\ a\ new\ list\ to\r\n\ get\ you\ started.\r\n\ \r\n\ @author\ mvail,\ mhthomas,\ amussell\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Valid\ command\ line\ args\ include\:\r\n\ \ -a\ \:\ print\ results\ from\ all\ tests\ (default\ is\ to\ print\ failed\ tests,\ only)\r\n\ \ -s\ \:\ hide\ Strings\ from\ toString()\ tests\r\n\ \ -m\ \:\ hide\ section\ summaries\ in\ output\r\n\ @param\ args\ not\ used\r\n
comment10.params=
comment10.target=IndexedUnsortedList\ A_addToFrontB_BA()
comment10.text=\ Scenario\:\ [A]\ ->\ addToFront(B)\ ->\ [B,A]\ \r\n\ @return\ [B,A]\ after\ addToFront(B)\r\n
comment11.params=
comment11.target=IndexedUnsortedList\ A_set0_B()
comment11.text=\ Scenario\:\ [A]\ ->\ set(0)\ ->\ [B]\ \r\n\ @return\ throws\ no\ exception\r\n
comment12.params=
comment12.target=IndexedUnsortedList\ B_addA_BA()
comment12.text=\ Scenario\:\ [B]\ ->\ add(A)\ ->\ [B,A]\ \r\n\ @return\ throws\ no\ exception\r\n
comment13.params=
comment13.target=IndexedUnsortedList\ B_addAfterA_B_BA()
comment13.text=\ Scenario\:\ [B]\ ->\ addAfter(B,A)\ ->\ [B,A]\ \r\n\ @return\ throws\ no\ exception\r\n
comment14.params=
comment14.target=IndexedUnsortedList\ BA_remove1_B()
comment14.text=\ Scenario\:\ [B,A]\ ->\ remove(1)\ ->\ [B]\ \r\n\ @return\ [A]\r\n
comment15.params=
comment15.target=IndexedUnsortedList\ BAC_removeLast_BA()
comment15.text=\ Scenario\:\ [B,A,C]\ ->\ removeLast()\ ->\ [B,A]\ \r\n\ @return\ [C]\r\n
comment16.params=
comment16.target=IndexedUnsortedList\ CA_set0B_BA()
comment16.text=\ Scenario\:\ [C,A]\ ->\ set(0,B)\ ->\ [B,A]\ \r\n\ @return\ throws\ no\ exception\r\n
comment17.params=scenario\ scenarioName
comment17.target=void\ testEmptyList(Scenario,\ java.lang.String)
comment17.text=\ Run\ all\ tests\ on\ scenarios\ resulting\ in\ an\ empty\ list\r\n\ @param\ scenario\ lambda\ reference\ to\ scenario\ builder\ method\r\n\ @param\ scenarioName\ name\ of\ the\ scenario\ being\ tested\r\n
comment18.params=scenario\ scenarioName\ contents\ contentsString
comment18.target=void\ testSingleElementList(Scenario,\ java.lang.String,\ java.lang.Integer[],\ java.lang.String)
comment18.text=\ Run\ all\ tests\ on\ scenarios\ resulting\ in\ a\ single\ element\ list\r\n\ @param\ scenario\ lambda\ reference\ to\ scenario\ builder\ method\r\n\ @param\ scenarioName\ name\ of\ the\ scenario\ being\ tested\r\n\ @param\ contents\ elements\ expected\ in\ the\ list\ after\ scenario\ has\ been\ set\ up\r\n\ @param\ contentsString\ contains\ character\ labels\ corresponding\ to\ values\ in\ contents\r\n
comment19.params=scenario\ scenarioName\ contents\ contentsString
comment19.target=void\ testTwoElementList(Scenario,\ java.lang.String,\ java.lang.Integer[],\ java.lang.String)
comment19.text=\ Run\ all\ tests\ on\ scenarios\ resulting\ in\ a\ two-element\ list\r\n\ @param\ scenario\ lambda\ reference\ to\ scenario\ builder\ method\r\n\ @param\ scenarioName\ name\ of\ the\ scenario\ being\ tested\r\n\ @param\ contents\ elements\ expected\ in\ the\ list\ after\ scenario\ has\ been\ set\ up\r\n\ @param\ contentsString\ contains\ character\ labels\ corresponding\ to\ values\ in\ contents\ \r\n
comment2.params=args
comment2.target=ListTester(java.lang.String[])
comment2.text=\ tester\ constructor\r\n\ @param\ args\ command\ line\ args\r\n
comment20.params=scenario\ scenarioName\ contents\ contentsString
comment20.target=void\ testThreeElementList(Scenario,\ java.lang.String,\ java.lang.Integer[],\ java.lang.String)
comment20.text=\ Run\ all\ tests\ on\ scenarios\ resulting\ in\ a\ three-element\ list\r\n\ @param\ scenario\ lambda\ reference\ to\ scenario\ builder\ method\r\n\ @param\ scenarioName\ name\ of\ the\ scenario\ being\ tested\r\n\ @param\ contents\ elements\ expected\ in\ the\ list\ after\ scenario\ has\ been\ set\ up\r\n\ @param\ contentsString\ contains\ character\ labels\ corresponding\ to\ values\ in\ contents\ \r\n
comment21.params=list\ expectedElement\ expectedResult
comment21.target=boolean\ testRemoveFirst(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment21.text=\ Runs\ removeFirst()\ method\ on\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedElement\ element\ or\ null\ if\ expectedResult\ is\ an\ Exception\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment22.params=list\ expectedElement\ expectedResult
comment22.target=boolean\ testRemoveLast(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment22.text=\ Runs\ removeLast()\ method\ on\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedElement\ element\ or\ null\ if\ expectedResult\ is\ an\ Exception\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment23.params=list\ element\ expectedResult
comment23.target=boolean\ testRemoveElement(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment23.text=\ Runs\ removeLast()\ method\ on\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\ element\ to\ remove\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment24.params=list\ expectedElement\ expectedResult
comment24.target=boolean\ testFirst(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment24.text=\ Runs\ first()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedElement\ element\ or\ null\ if\ expectedResult\ is\ an\ Exception\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment25.params=list\ expectedElement\ expectedResult
comment25.target=boolean\ testLast(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment25.text=\ Runs\ last()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedElement\ element\ or\ null\ if\ expectedResult\ is\ an\ Exception\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment26.params=list\ element\ expectedResult
comment26.target=boolean\ testContains(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment26.text=\ Runs\ contains()\ method\ on\ a\ given\ list\ and\ element\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment27.params=list\ expectedResult
comment27.target=boolean\ testIsEmpty(IndexedUnsortedList,\ ListTester.Result)
comment27.text=\ Runs\ isEmpty()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment28.params=list\ expectedSize
comment28.target=boolean\ testSize(IndexedUnsortedList,\ int)
comment28.text=\ Runs\ size()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedSize\r\n\ @return\ test\ success\r\n
comment29.params=list\ expectedResult
comment29.target=boolean\ testToString(IndexedUnsortedList,\ ListTester.Result)
comment29.text=\ Runs\ toString()\ method\ on\ given\ list\ and\ attempts\ to\ confirm\ non-default\ or\ empty\ String\r\n\ difficult\ to\ test\ -\ just\ confirm\ that\ default\ address\ output\ has\ been\ overridden\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment3.params=testDesc\ result
comment3.target=void\ printTest(java.lang.String,\ boolean)
comment3.text=\ Print\ test\ results\ in\ a\ consistent\ format\r\n\ @param\ testDesc\ description\ of\ the\ test\r\n\ @param\ result\ indicates\ if\ the\ test\ passed\ or\ failed\r\n
comment30.params=list\ element\ expectedResult
comment30.target=boolean\ testAddToFront(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment30.text=\ Runs\ addToFront()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment31.params=list\ element\ expectedResult
comment31.target=boolean\ testAddToRear(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment31.text=\ Runs\ addToRear()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment32.params=list\ target\ element\ expectedResult
comment32.target=boolean\ testAddAfter(IndexedUnsortedList,\ java.lang.Integer,\ java.lang.Integer,\ ListTester.Result)
comment32.text=\ Runs\ addAfter()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ target\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment33.params=list\ index\ element\ expectedResult
comment33.target=boolean\ testAddAtIndex(IndexedUnsortedList,\ int,\ java.lang.Integer,\ ListTester.Result)
comment33.text=\ Runs\ add(int,\ T)\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ index\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment34.params=list\ element\ expectedResult
comment34.target=boolean\ testAdd(IndexedUnsortedList,\ java.lang.Integer,\ ListTester.Result)
comment34.text=\ Runs\ add(T)\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment35.params=list\ index\ element\ expectedResult
comment35.target=boolean\ testSet(IndexedUnsortedList,\ int,\ java.lang.Integer,\ ListTester.Result)
comment35.text=\ Runs\ set(int,\ T)\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ index\r\n\ @param\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment36.params=list\ index\ expectedElement\ expectedResult
comment36.target=boolean\ testGet(IndexedUnsortedList,\ int,\ java.lang.Integer,\ ListTester.Result)
comment36.text=\ Runs\ get()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ index\r\n\ @param\ expectedElement\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment37.params=list\ index\ expectedElement\ expectedResult
comment37.target=boolean\ testRemoveIndex(IndexedUnsortedList,\ int,\ java.lang.Integer,\ ListTester.Result)
comment37.text=\ Runs\ remove(index)\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ index\r\n\ @param\ expectedElement\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment38.params=list\ element\ expectedIndex
comment38.target=boolean\ testIndexOf(IndexedUnsortedList,\ java.lang.Integer,\ int)
comment38.text=\ Runs\ indexOf()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ element\r\n\ @param\ expectedIndex\r\n\ @return\ test\ success\r\n
comment39.params=list\ expectedResult
comment39.target=boolean\ testIter(IndexedUnsortedList,\ ListTester.Result)
comment39.text=\ Runs\ iterator()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment4.params=
comment4.target=void\ printFinalSummary()
comment4.text=Print\ a\ final\ summary
comment40.params=iterator\ expectedResult
comment40.target=boolean\ testIterHasNext(java.util.Iterator,\ ListTester.Result)
comment40.text=\ Runs\ list's\ iterator\ hasNext()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ hasNext()\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment41.params=iterator\ expectedValue\ expectedResult
comment41.target=boolean\ testIterNext(java.util.Iterator,\ java.lang.Integer,\ ListTester.Result)
comment41.text=\ Runs\ list's\ iterator\ next()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ hasNext()\r\n\ @param\ expectedValue\ the\ Integer\ expected\ from\ next()\ or\ null\ if\ an\ exception\ is\ expected\r\n\ @param\ expectedResult\ MatchingValue\ or\ expected\ exception\r\n\ @return\ test\ success\r\n
comment42.params=iterator\ expectedResult
comment42.target=boolean\ testIterRemove(java.util.Iterator,\ ListTester.Result)
comment42.text=\ Runs\ list's\ iterator\ remove()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ remove()\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment43.params=list\ expectedResult
comment43.target=boolean\ testIterConcurrent(IndexedUnsortedList,\ ListTester.Result)
comment43.text=\ Runs\ iterator()\ method\ twice\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment44.params=list\ numCallsToNext
comment44.target=java.util.Iterator\ iterAfterNext(IndexedUnsortedList,\ int)
comment44.text=\ Helper\ for\ testing\ iterators.\ Return\ an\ Iterator\ that\ has\ been\ advanced\ numCallsToNext\ times.\r\n\ @param\ list\r\n\ @param\ numCallsToNext\r\n\ @return\ Iterator\ for\ given\ list,\ after\ numCallsToNext\r\n
comment45.params=iterator
comment45.target=java.util.Iterator\ iterAfterRemove(java.util.Iterator)
comment45.text=\ Helper\ for\ testing\ iterators.\ Return\ an\ Iterator\ that\ has\ had\ remove()\ called\ once.\r\n\ @param\ iterator\r\n\ @return\ same\ Iterator\ following\ a\ call\ to\ remove()\r\n
comment46.params=list\ expectedResult
comment46.target=boolean\ testListIter(IndexedUnsortedList,\ ListTester.Result)
comment46.text=\ Runs\ listIterator()\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment47.params=list\ startingIndex\ expectedResult
comment47.target=boolean\ testListIter(IndexedUnsortedList,\ int,\ ListTester.Result)
comment47.text=\ Runs\ listIterator(index)\ method\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @param\ startingIndex\r\n\ @return\ test\ success\r\n
comment48.params=iterator\ expectedResult
comment48.target=boolean\ testListIterHasPrevious(java.util.ListIterator,\ ListTester.Result)
comment48.text=\ Runs\ ListIterator's\ hasPrevious()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ hasPrevious()\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment49.params=iterator\ expectedValue\ expectedResult
comment49.target=boolean\ testListIterPrevious(java.util.ListIterator,\ java.lang.Integer,\ ListTester.Result)
comment49.text=\ Runs\ ListIterator\ previous()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ hasPrevious()\r\n\ @param\ expectedValue\ the\ Integer\ expected\ from\ next()\ or\ null\ if\ an\ exception\ is\ expected\r\n\ @param\ expectedResult\ MatchingValue\ or\ expected\ exception\r\n\ @return\ test\ success\r\n
comment5.params=
comment5.target=void\ printSectionSummary()
comment5.text=Print\ a\ section\ summary
comment50.params=iterator\ element\ expectedResult
comment50.target=boolean\ testListIterAdd(java.util.ListIterator,\ java.lang.Integer,\ ListTester.Result)
comment50.text=\ Runs\ ListIterator\ add()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ add()\r\n\ @param\ element\ new\ Integer\ for\ insertion\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment51.params=iterator\ element\ expectedResult
comment51.target=boolean\ testListIterSet(java.util.ListIterator,\ java.lang.Integer,\ ListTester.Result)
comment51.text=\ Runs\ ListIterator\ set()\ method\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ iterator\ an\ iterator\ already\ positioned\ for\ the\ call\ to\ set()\r\n\ @param\ element\ replacement\ Integer\ for\ last\ returned\ element\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment52.params=iterator\ expectedIndex\ expectedResult
comment52.target=boolean\ testListIterNextIndex(java.util.ListIterator,\ int,\ ListTester.Result)
comment52.text=\ Runs\ ListIterator\ nextIndex()\ and\ checks\ result\ against\ expected\ Result\r\n\ @param\ iterator\ already\ positioned\ for\ the\ call\ to\ nextIndex()\r\n\ @param\ expectedIndex\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment53.params=iterator\ expectedIndex\ expectedResult
comment53.target=boolean\ testListIterPreviousIndex(java.util.ListIterator,\ int,\ ListTester.Result)
comment53.text=\ Runs\ ListIterator\ previousIndex()\ and\ checks\ result\ against\ expected\ Result\r\n\ @param\ iterator\ already\ positioned\ for\ the\ call\ to\ previousIndex()\r\n\ @param\ expectedIndex\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment54.params=list\ expectedResult
comment54.target=boolean\ testListIterConcurrent(IndexedUnsortedList,\ ListTester.Result)
comment54.text=\ Runs\ listIterator()\ method\ twice\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment55.params=list\ index1\ index2\ expectedResult
comment55.target=boolean\ testListIterConcurrent(IndexedUnsortedList,\ int,\ int,\ ListTester.Result)
comment55.text=\ Runs\ listIterator(index)\ method\ twice\ on\ a\ given\ list\ and\ checks\ result\ against\ expectedResult\r\n\ @param\ list\ a\ list\ already\ prepared\ for\ a\ given\ change\ scenario\r\n\ @param\ index1\r\n\ @param\ index2\r\n\ @param\ expectedResult\r\n\ @return\ test\ success\r\n
comment56.params=iterator\ numCallsToNext
comment56.target=java.util.ListIterator\ listIterAfterNext(java.util.ListIterator,\ int)
comment56.text=\ Helper\ for\ testing\ ListIterators.\ Return\ a\ ListIterator\ that\ has\ been\ advanced\ numCallsToNext\ times.\r\n\ @param\ iterator\r\n\ @param\ numCallsToNext\r\n\ @return\ same\ iterator\ after\ numCallsToNext\r\n
comment57.params=iterator\ numCallsToPrevious
comment57.target=java.util.ListIterator\ listIterAfterPrevious(java.util.ListIterator,\ int)
comment57.text=\ Helper\ for\ testing\ ListIterators.\ Return\ a\ ListIterator\ that\ has\ been\ backed\ up\ numCallsToPrevious\ times.\r\n\ @param\ iterator\r\n\ @param\ numCallsToPrevious\r\n\ @return\ same\ iterator\ after\ numCallsToPrevious\r\n
comment58.params=iterator
comment58.target=java.util.ListIterator\ listIterAfterRemove(java.util.ListIterator)
comment58.text=\ Helper\ for\ testing\ ListIterators.\ Return\ a\ ListIterator\ that\ has\ had\ remove()\ called\ once.\r\n\ @param\ iterator\r\n\ @return\ same\ Iterator\ following\ a\ call\ to\ remove()\r\n
comment59.params=
comment59.target=void\ test_IterConcurrency()
comment59.text=run\ Iterator\ concurrency\ tests
comment6.params=
comment6.target=void\ runTests()
comment6.text=Run\ tests\ to\ confirm\ required\ functionality\ from\ list\ constructors\ and\ methods
comment60.params=
comment60.target=void\ test_ListIterConcurrency()
comment60.text=run\ ListIterator\ concurrency\ tests
comment7.params=
comment7.target=IndexedUnsortedList\ newList()
comment7.text=\r\n\ Returns\ a\ IndexedUnsortedList\ for\ the\ "new\ empty\ list"\ scenario.\r\n\ Scenario\:\ no\ list\ ->\ constructor\ ->\ [\ ]\r\n\ \r\n\ NOTE\:\ Comment\ out\ cases\ for\ any\ implementations\ not\ currently\ available\r\n\r\n\ @return\ a\ new,\ empty\ IndexedUnsortedList\r\n
comment8.params=
comment8.target=IndexedUnsortedList\ emptyList_addToFrontA_A()
comment8.text=\ Scenario\:\ empty\ list\ ->\ addToFront(A)\ ->\ [A]\ \r\n\ @return\ [A]\ after\ addToFront(A)\r\n
comment9.params=
comment9.target=IndexedUnsortedList\ A_removeA_emptySet()
comment9.text=\ Scenario\:\ [A]\ ->\ remove(A)\ ->\ empty\ list\ \r\n\ @return\ [A]\ after\ remove(A)\r\n
numComments=61
